{"version":3,"sources":["Components/dropDown/index.js","api/index.js","Components/schedualTable/row.js","Components/schedualTable/index.js","Components/channelSelector/index.js","utils/index.js","App.js","reportWebVitals.js","index.js"],"names":["dateNameToPrettyName","date","console","log","substring","month","toString","day","DropDown","disabled","allDates","currentDate","onChange","e","target","value","map","defaultProps","channels","currentChannel","formatRuvData","tvShow","isltitill","title","upphaf","startTime","thattur","series","episode","undefined","lysing","description","dagsetning","getAvailableChannels","a","fetch","rawData","json","jsonData","getDataForChannel","channelName","getImdbData","movieName","getRuvData","results","SchedualRow","data","subTitle","React","useState","show","setShow","imdbData","setImdbData","className","Button","onClick","api","then","dat","Response","size","Modal","onHide","aria-labelledby","centered","Header","closeButton","Title","Body","Poster","src","alt","imdbRating","Ratings","Value","Footer","SchedualTable","thattafjoldi","channelNameToPrettyName","name","ChannelSelector","id","channel","allDate","today","Date","i","push","toISOString","setDate","getDate","filter","includes","App","allChannels","setAllChannels","setCurrentChannel","Utils","setCurrentDate","allDataForChannel","setAllDataForChannel","visibleData","setVisibleData","useEffect","stod2Channels","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65531fd1.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst dateNameToPrettyName = (date) => {\n  console.log(date.substring(5, 6));\n  const month = date.toString().substring(5, 7);\n  console.log(month);\n  const day = date.toString().substring(8, 10);\n  console.log(day);\n  console.log(day.substring(0, 0));\n  switch (month.toString()) {\n    case \"01\":\n      return `${day}.Janúar`;\n    case \"02\":\n      return `${day}.Febrúar`;\n    case \"03\":\n      return `${day}.Mars`;\n    case \"04\":\n      return `${day}.Apríl`;\n    case \"05\":\n      return `${day}.Maí`;\n    case \"06\":\n      return `${day}.Júní`;\n    case \"07\":\n      return `${day}.Júlí`;\n    case \"08\":\n      return `${day}.Ágúst`;\n    case \"09\":\n      return `${day}.September`;\n    case \"10\":\n      return `${day}.Október`;\n    case \"11\":\n      return `${day}.Nóvember`;\n    case \"12\":\n      return `${day}.Desember`;\n    default:\n      return date;\n  }\n};\n\nconst DropDown = ({ disabled, allDates, currentDate, onChange }) => {\n  return (\n    <select\n      onChange={(e) => onChange(e.target.value)}\n      value={currentDate}\n      disabled={disabled}\n    >\n      {allDates.map((date) => (\n        <option key={date.toString()} value={date}>\n          {dateNameToPrettyName(date.toString())}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nDropDown.propTypes = {\n  disabled: PropTypes.bool,\n  allDates: PropTypes.arrayOf(PropTypes.string),\n  currentDate: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nDropDown.defaultProps = {\n  disabled: false,\n  channels: [],\n  currentChannel: \"\",\n};\n// skoða select vantar á moti held ég labele eða eh tjekk\nexport default DropDown;\n","const getAvailableChannels = async () => {\n  const rawData = await fetch(\"https://api.stod2.is/dagskra/api\");\n  const jsonData = await rawData.json();\n  return jsonData;\n};\n\nconst getDataForChannel = async (channelName) => {\n  const rawData = await fetch(\n    \"https://api.stod2.is/dagskra/api/\" + channelName\n  );\n  const jsonData = await rawData.json();\n  return jsonData;\n};\n\nconst getImdbData = async (movieName) => {\n  const rawData = await fetch(\n    \"http://www.omdbapi.com/?t=\" +\n      movieName +\n      \"&y=&plot=short&r=json&apikey=c1087fa1\"\n  );\n  const jsonData = await rawData.json();\n  return jsonData;\n};\n\nconst formatRuvData = (tvShow) => {\n  return {\n    isltitill: tvShow.title,\n    upphaf: tvShow.startTime,\n    thattur: tvShow.series ? tvShow.series.episode : undefined,\n    lysing: tvShow.description,\n    dagsetning: tvShow.startTime,\n  };\n};\n\nconst getRuvData = async () => {\n  const rawData = await fetch(\"https://apis.is/tv/ruv\");\n  const jsonData = await rawData.json();\n  return jsonData.results.map(formatRuvData);\n};\n\nexport default {\n  getAvailableChannels,\n  getDataForChannel,\n  getImdbData,\n  getRuvData,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal, Button } from \"react-bootstrap/\";\n\nimport \"./row.css\";\nimport api from \"../../api\";\n\nconst SchedualRow = ({ data, title, subTitle }) => {\n  const [show, setShow] = React.useState(false);\n  const [imdbData, setImdbData] = React.useState();\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => {\n    api.getImdbData(title).then((dat) => {\n      if (dat.Response === \"True\") {\n        setImdbData(dat);\n      }\n    });\n    setShow(true);\n  };\n\n  return (\n    <div className=\"SchedualRow\" key={data.upphaf}>\n      <div>{data.upphaf.substring(11, 16)}</div>\n      <div>\n        <strong>{title}</strong>\n        {subTitle !== \"\" && <p>{subTitle}</p>}\n      </div>\n      <div>{data.lysing.substring(0, 60) + \"...\"}</div>\n      <div>\n        <Button onClick={handleShow} size=\"sm\">\n          +\n        </Button>\n      </div>\n      <Modal\n        show={show}\n        onHide={handleClose}\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>\n            <h1>{title}</h1>\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          {subTitle !== \"\" && <p>{subTitle}</p>}\n          <p>{data.lysing}</p>\n          <div className=\"posterAndRatings\">\n            <div className=\"poster\">\n              {imdbData && imdbData.Poster ? (\n                <img src={imdbData.Poster} alt=\"Poster\" />\n              ) : (\n                \"\"\n              )}\n            </div>\n            {imdbData && imdbData.imdbRating ? (\n              <div className=\"Irating\">\n                <img\n                  src=\"https://m.media-amazon.com/images/G/01/IMDb/BG_rectangle._CB1509060989_SY230_SX307_AL_.png\"\n                  alt=\"Poster\"\n                />{\" \"}\n                {imdbData.Ratings[0].Value}\n              </div>\n            ) : (\n              \"\"\n            )}\n            <div>\n              {imdbData && imdbData.Ratings[1] ? (\n                <div className=\"Trating\">\n                  <img\n                    src=\"https://www.clipartkey.com/mpngs/m/48-489657_mini-tomato-icons-png-tomato-clipart-png-icon.png\"\n                    alt=\"Poster\"\n                  />{\" \"}\n                  {imdbData.Ratings[1].Value}\n                </div>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </div>\n        </Modal.Body>\n        <Modal.Footer></Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nSchedualRow.propTypes = {\n  title: PropTypes.string.isRequired,\n  subTitle: PropTypes.string,\n};\n\nexport default SchedualRow;\n","import React from \"react\";\nimport Row from \"./row\";\n\nimport \"./index.css\";\n\nconst SchedualTable = ({ data }) => {\n  if (data) {\n    return (\n      <div>\n        <div className=\"SchedualContainer\">\n          <div className=\"SchedualRow\">\n            <div> Tími </div>\n            <div> Nafn </div>\n            <div> Lýsing </div>\n          </div>\n          <div className=\"SchedualContent\">\n            {data.map((dat) => (\n              <Row\n                key={dat.isltitill + dat.upphaf}\n                data={dat}\n                title={dat.isltitill}\n                subTitle={\n                  dat.thattur\n                    ? \"Þáttur \" +\n                      dat.thattur +\n                      (dat.thattafjoldi ? \" af \" + dat.thattafjoldi : \"\")\n                    : \"\"\n                }\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  } else {\n    return <div>Loading</div>;\n  }\n};\n\nexport default SchedualTable;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst channelNameToPrettyName = (name) => {\n  switch (name) {\n    case \"stod2\":\n      return \"Stöð 2\";\n    case \"bio\":\n      return \"Stöð2 Bío\";\n    case \"esport\":\n      return \"Stöð 2 Esports\";\n    case \"golfstodin\":\n      return \"Stöð 2 Golf\";\n    case \"sport\":\n      return \"Stöð 2 Sport\";\n    case \"sport2\":\n      return \"Stöð 2 sport 2\";\n    case \"sport3\":\n      return \"Stöð 2 Sport 3\";\n    case \"sport4\":\n      return \"Stöð 2 Sport 4\";\n    case \"sport5\":\n      return \"Stöð 2 Sport 5\";\n    case \"stod3\":\n      return \"Stöð 2 fjölskylda\";\n    case \"ruv\":\n      return \"Rúv\";\n    default:\n      return name;\n  }\n};\n\nconst ChannelSelector = ({ channels, currentChannel, onChange }) => {\n  return (\n    <select\n      id=\"dropdown-basic-button\"\n      title={channelNameToPrettyName(currentChannel)}\n      size=\"sm\"\n      onChange={(e) => onChange(e.target.value)}\n      value={currentChannel}\n    >\n      {channels.map((channel) => (\n        <option key={channel} value={channel}>\n          {channelNameToPrettyName(channel)}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nChannelSelector.propTypes = {\n  channels: PropTypes.arrayOf(PropTypes.string),\n  currentChannel: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nChannelSelector.defaultProps = {\n  channels: [],\n  currentChannel: \"\",\n};\n\nexport default ChannelSelector;\n","const getNext7Days = () => {\n  const allDate = [];\n  let today = new Date();\n  for (let i = 0; i < 7; i++) {\n    allDate.push(today.toISOString().substring(0, 10));\n    today.setDate(today.getDate() + 1);\n  }\n  return allDate;\n};\n\nconst filterTvDataForDate = (data, date) => {\n  return data.filter((tvShow) => tvShow.dagsetning.includes(date));\n};\n\nexport default { getNext7Days, filterTvDataForDate };\n","import React, { useEffect } from \"react\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport DropDown from \"./Components/dropDown/index\";\nimport SchedualTable from \"./Components/schedualTable\";\nimport ChannelSelector from \"./Components/channelSelector\";\nimport Utils from \"./utils\";\nimport api from \"./api\";\n\nfunction App() {\n  const [allChannels, setAllChannels] = React.useState();\n  const [currentChannel, setCurrentChannel] = React.useState();\n\n  const [allDates] = React.useState(Utils.getNext7Days());\n  const [currentDate, setCurrentDate] = React.useState(allDates[0]);\n\n  const [allDataForChannel, setAllDataForChannel] = React.useState();\n  const [visibleData, setVisibleData] = React.useState();\n\n  useEffect(() => {\n    /** This hook is responsible for fetching all channels and setting the inital channel */\n    api.getAvailableChannels().then((data) => {\n      console.log(data);\n      const stod2Channels = data.filter((channel) => channel !== \"beint\");\n      stod2Channels.push(\"ruv\");\n      setAllChannels(stod2Channels);\n      if (data.includes(\"stod2\")) {\n        setCurrentChannel(\"stod2\");\n      } else {\n        setCurrentChannel(data[0]);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    /** This hook is responsible for fetching data for the currentChannel */\n    if (currentChannel) {\n      setAllDataForChannel(null);\n      if (currentChannel === \"ruv\") {\n        api.getRuvData().then((data) => {\n          setAllDataForChannel(data);\n        });\n      } else {\n        api.getDataForChannel(currentChannel).then((data) => {\n          setAllDataForChannel(data);\n        });\n      }\n    }\n  }, [currentChannel]);\n\n  /** This hook is responsible for filtering alldata for specific date*/\n  useEffect(() => {\n    if (allDataForChannel) {\n      setVisibleData(Utils.filterTvDataForDate(allDataForChannel, currentDate));\n    }\n  }, [allDataForChannel, currentDate]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Dagská</h1>\n      </header>\n      <div className=\"Controlers\">\n        <ChannelSelector\n          channels={allChannels}\n          currentChannel={currentChannel}\n          onChange={(channel) => setCurrentChannel(channel)}\n        />\n        <DropDown\n          allDates={allDates}\n          currentDate={currentDate}\n          onChange={(currentDate) => setCurrentDate(currentDate)}\n          disabled={currentChannel === \"ruv\"}\n        />\n      </div>\n      <SchedualTable data={visibleData} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}